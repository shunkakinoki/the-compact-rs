/**

Generated by the following Solidity interface...
```solidity
interface TransferLogic {
    error OnlyDirectCalls();
    error TStoreAlreadyActivated();
    error TStoreNotSupported();
    error TloadTestContractDeploymentFailed();

    function __activateTstore() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "__activateTstore",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "error",
    "name": "OnlyDirectCalls",
    "inputs": []
  },
  {
    "type": "error",
    "name": "TStoreAlreadyActivated",
    "inputs": []
  },
  {
    "type": "error",
    "name": "TStoreNotSupported",
    "inputs": []
  },
  {
    "type": "error",
    "name": "TloadTestContractDeploymentFailed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod TransferLogic {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01\xA0`@R4a\0`Wa\0\x12a\0\x83V[`@Qa\x01P\x90\x81a\x02#\x829`\x80Q\x81`m\x01R`\xA0Q\x81`=\x01R`\xC0Q\x81PP`\xE0Q\x81PPa\x01\0Q\x81PPa\x01 Q\x81PPa\x01@Q\x81PPa\x01`Q\x81PPa\x01\x80Q\x81PP\xF3[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q=_\x82>=\x90\xFD[i`\x02`\x1Ea=\\=R\xF3_R`\n`\x16_\xF0`\x01`\x01`\xA0\x1B\x03\x81\x16\x15a\x02\x13W_\x80\x80\x80\x84`\nZ\x04\xFA=\x15a\x02\x0EW=`\x01`\x01`@\x1B\x03\x81\x11a\x01\xF4W`@Q\x90`\x1F\x81\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x82\x01`\x01`\x01`@\x1B\x03\x81\x11\x83\x82\x10\x17a\x01\xF4W`@R\x81R_` =\x92\x01>[\x80\x15a\x01\xF9W`\x01`\xC0R`\x03`\xE0R`\x05a\x01\0R[`\xA0R`\x80RFa\x01 Ra\x01\xA2F`\xA0\x90`@Q\x90\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x82R\x7F^o{N\x1A\xC3\xD6%\xBA\xC4\x18\xBC\x95U\x10\xB3\xE0T\xCBl\xC2<\xC2x\x85\x10\x7F\x08\x01\x80\xB2\x92` \x83\x01R\x7F\x04HR\xB2\xA6p\xAD\xE5@~x\xFB(c\xC5\x1D\xE9\xFC\xB9eB\xA0q\x86\xFE:\xED\xA6\xBB\x8A\x11m`@\x83\x01R``\x82\x01R0`\x80\x82\x01R \x90V[a\x01@R`@Qa>*\x80\x82\x01`\x01`\x01`@\x1B\x03\x81\x11\x83\x82\x10\x17a\x01\xF4W\x82\x91a\x03s\x839\x03\x90_\xF0\x80\x15a\x01\xEFWa\x01`Rn\"\xD4s\x03\x0F\x11m\xDE\xE9\xF6\xB4:\xC7\x8B\xA3;\x15\x15a\x01\x80RV[a\0xV[a\0dV[`\x02`\xC0R`\x04`\xE0R`\x06a\x01\0Ra\x01\x0EV[a\0\xF7V[c*\xEAX\x87`\xE0\x1B_R`\x04_\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1Cct#\xEB<\x14a\0$W_\x80\xFD[4a\x01?W_6`\x03\x19\x01\x12a\x01?W23\x03a\x010W\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x15a\x01%W[a\x01\x16W_\x80\x80\x80\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\nZ\x04\xFA=\x15a\x01\x11W=g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\0\xFDW`@Q\x90`\x1F\x81\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x82\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x83\x82\x10\x17a\0\xFDW`@R\x81R_` =\x92\x01>[\x15a\0\xEEW_\x80T`\xFF\x19\x16`\x01\x17\x90U\0[cp\xA4\x07\x8F`\xE0\x1B_R`\x04_\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[a\0\xDBV[c\x0FE\xB9\x8B`\xE4\x1B_R`\x04_\xFD[P`\xFF_T\x16a\0cV[c\tfP\xC5`\xE2\x1B_R`\x04_\xFD[_\x80\xFD\xFE\xA1dsolcC\0\x08\x1C\0\n`\x80\x80`@R4`\x15Wa>\x10\x90\x81a\0\x1A\x829\xF3[_\x80\xFD\xFE`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1C\x80b\xAD\x80\x0C\x14a7\x04W\x80cNA\xA1\xFB\x14a6\x96Wc\xD67\xCA\x8D\x14a\09W_\x80\xFD[4a6~W6`\x03\x19\x01`\xA0\x81\x12a6~W`\x80\x13a6~W`@Q`\x80\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a6\x82W`@R`\x045\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x90\x81\x83\x03a6~W\x82\x81R`$5\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x82\x03a6~W` \x81\x01\x91\x82R`D5\x92`\x08\x84\x10\x15a6~W`@\x82\x01\x93\x84R`d5\x94`\x02\x86\x10\x15a6~W``\x83\x81\x01\x96\x87R\x1Bk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16a6lWPa\x01\x1C`@Qa\0\xF2`@\x82a7\x93V[`\x0C\x81Rk'0\xBA4\xBB2\x90*7\xB5\xB2\xB7`\xA1\x1B` \x82\x01R\x92[Q`\x01`\x01`\xA0\x1B\x03\x16a8\xA1V[\x92Q`\x08\x81\x10\x15a6XWa\x010\x90a9\xC8V[\x93Q`\x02\x81\x10\x15a6XWa\x01D\x90a;\xBAV[\x81Qa\x01X\x90`\x01`\x01`\xA0\x1B\x03\x16a7\xB5V[\x82Q\x90\x91\x90a\x01o\x90`\x01`\x01`\xA0\x1B\x03\x16a84V[\x92Qc1<\xE5g`\x04\x90\x81R_\x81\x90R` \x91\x82\x91\x90\x82\x90`\x01`\x01`\xA0\x1B\x03\x16b\x01\x86\xA0\xFA=`\x1F\x10\x16` Q\x02`\xFF\x16a\x01\xAA\x90a<YV[\x91`@Q\x95` \x87\x01\x97q\x03\xD9\x13s\x0Bk)\x11\xD1\x01\x12\x1B{k\x83\x0B\x1B\xA1`u\x1B\x89R\x87\x86Q\x80` \x89\x01`2\x84\x01^\x81\x01a\x08\x8B`\xF2\x1B`2\x82\x01R\x03`2\x01`\x1D\x19\x81\x01\x89R`\x02\x01a\x01\xFE\x90\x89a7\x93V[`@Q\x94` \x86\x01\x94\x7F\"description\": \"Compact \0\0\0\0\0\0\0\0\x86R\x84Q\x80` \x87\x01`8\x8A\x01^\x87\x01`8\x81\x01a\x04\x05`\xF3\x1B\x90R\x89Q\x90\x81` \x8C\x01`:\x83\x01^\x01`8\x01`\x02\x81\x01\x7F) resource lock with allocator \0\x90R\x84Q\x90\x81` \x87\x01`!\x83\x01^\x01`\x02\x01\x93`\x1F\x85\x01t\x01\x03\x0Bs!\x03\x93+\x9B+\xA1\x03\x83+\x93K{!\x03{1`]\x1B\x90R\x87\x84Q` \x86\x01\x96\x81\x88`4\x83\x01^\x01`\x1F\x01a\x08\x8B`\xF2\x1B`\x15\x82\x01R\x03`\x15\x01`\x1D\x19\x81\x01\x89R`\x02\x01a\x02\xE3\x90\x89a7\x93V[a\x02\xEE`\x845a<YV[`@Q\x90a\x02\xFD`@\x83a7\x93V[`\x02\x82Ra\x12Q`\xF2\x1B` \x83\x01Ra\x03\x15\x91a<\x9EV[\x99`@Q\x90a\x03%`@\x83a7\x93V[`\r\x82RlToken Address`\x98\x1B` \x83\x01Ra\x03H\x91a<\x9EV[\x95`@Q\x90a\x03X`@\x83a7\x93V[`\n\x82RiToken Name`\xB0\x1B` \x83\x01Ra\x03x\x91a<\x9EV[\x98`@Q\x90a\x03\x88`@\x83a7\x93V[`\x0C\x82Rk\x15\x1B\xDA\xD9[\x88\x14\xDE[X\x9B\xDB`\xA2\x1B` \x83\x01Ra\x03\xAA\x91a<\x9EV[\x92`@Q\x90a\x03\xBA`@\x83a7\x93V[`\x0E\x82RmToken Decimals`\x90\x1B` \x83\x01Ra\x03\xDE\x91a<\x9EV[\x90`@Q\x90a\x03\xEE`@\x83a7\x93V[`\t\x82Rh \xB667\xB1\xB0\xBA7\xB9`\xB9\x1B` \x83\x01Ra\x04\r\x91a<\x9EV[\x91`@Q\x90a\x04\x1D`@\x83a7\x93V[`\x05\x82RdScope`\xD8\x1B` \x83\x01Ra\x048\x91a<\x9EV[\x92`@Q\x95a\x04H`@\x88a7\x93V[`\x0C\x87R` \x87\x01\x90k\x14\x99\\\xD9]\x08\x14\x19\\\x9A[\xD9`\xA2\x1B\x82R`@Q\x90a\x04r` \x83a7\x93V[_\x82R`@Q\x97\x88\x93` \x85\x01\x9Ao=\x91:90\xB4\xBA/\xBA<\xB82\x91\x1D\x10\x11`\x81\x1B\x8CRQ\x80\x91`0\x87\x01^\x84\x01\x90l\x11\x16\x10\x11;0\xB6:\xB2\x91\x1D\x10\x11`\x99\x1B`0\x83\x01RQ\x80\x92`=\x83\x01^\x01`0\x01a\"}`\xF0\x1B`\r\x82\x01R\x81Q` \x81\x93\x01`\x0F\x83\x01^\x01`\r\x01`\x02\x81\x01_\x90R\x03`\x02\x01`\x1F\x19\x81\x01\x86Ra\x04\xFA\x90\x86a7\x93V[`@Q\x99\x8A\x97` \x89\x01\x9C\x8Dn\"attributes\": [`\x88\x1B\x90R\x80Q` \x81\x92\x01`/\x8C\x01^\x89\x01`/\x81\x01\x91_\x83R\x80Q\x92` \x84\x92\x01\x90^\x01`/\x01_\x81R\x81Q` \x81\x93\x01\x82^\x01_\x81R\x81Q` \x81\x93\x01\x82^\x01_\x81R\x81Q` \x81\x93\x01\x82^\x01_\x81R\x81Q` \x81\x93\x01\x82^\x01_\x81R\x81Q` \x81\x93\x01\x82^\x01\x90_\x82RQ\x80\x92\x82^\x01a]}`\xF0\x1B\x81R\x03`\x1D\x19\x81\x01\x84R`\x02\x01a\x05\xA7\x90\x84a7\x93V[`@Q\x90a\x05\xB7a'\xC0\x83a7\x93V[a'\x8E\x82R\x7F\"image\": \"data:image/svg+xml;bas` \x80\x84\x01\x91\x82R\x7Fe64,PD94bWwgdmVyc2lvbj0iMS4wIiBl`@\x80\x86\x01\x91\x90\x91R\x7FbmNvZGluZz0iaXNvLTg4NTktMSI/Pg0K``\x86\x01R\x7FPCEtLSBHZW5lcmF0b3I6IEFkb2JlIEls`\x80\x86\x01R\x7FbHVzdHJhdG9yIDIzLjAuNSwgU1ZHIEV4`\xA0\x86\x01R\x7FcG9ydCBQbHVnLUluIC4gU1ZHIFZlcnNp`\xC0\x86\x01R\x7Fb246IDYuMDAgQnVpbGQgMCkgIC0tPg0K`\xE0\x86\x01R\x7FPHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5za\x01\0\x86\x01R\x7FPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwa\x01 \x86\x01R\x7FL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6a\x01@\x86\x01R\x7FLy93d3cudzMub3JnLzE5OTkveGxpbmsia\x01`\x86\x01R\x7FIHg9IjBweCIgeT0iMHB4Ig0KCSB2aWV3a\x01\x80\x86\x01R\x7FQm94PSIwIDAgNDkyIDQ5MiIgc3R5bGU9a\x01\xA0\x86\x01R\x7FImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwa\x01\xC0\x86\x01R\x7FIDAgNDkyIDQ5MjsiIHhtbDpzcGFjZT0ia\x01\xE0\x86\x01R\x7FcHJlc2VydmUiPg0KPGcgaWQ9Ik1hc3Rla\x02\0\x86\x01R\x7Fcl9MYXllcl8yIj4NCjwvZz4NCjxnIGlka\x02 \x86\x01R\x7FPSJMYXllcl8xIj4NCgk8Zz4NCgkJPGc+a\x02@\x86\x01R\x7FDQoJCQk8Zz4NCgkJCQk8Zz4NCgkJCQkJa\x02`\x86\x01R\x7FPHBhdGggc3R5bGU9ImZpbGwtcnVsZTpla\x02\x80\x86\x01R\x7FdmVub2RkO2NsaXAtcnVsZTpldmVub2Rka\x02\xA0\x86\x01R\x7FO2ZpbGw6IzIxMjEyMTsiIGQ9Ik0zMjEua\x02\xC0\x86\x01R\x7FMzA4LDI5NC44NjRjNS4zNTIsNS4zMjgsa\x02\xE0\x86\x01R\x7FOS40NTYsMTIuMTQ0LDE1Ljc5Miw4Ljgza\x03\0\x86\x01R\x7FMg0KCQkJCQkJYzIuNDQ4LTEuMjcyLDUua\x03 \x86\x01R\x7FMDY0LTMuMDk2LDcuMzItNS4yNTZjMy43a\x03@\x86\x01R\x7FNDQtMy41NzYsOC4yNTYtOS41MjgsNC42a\x03`\x86\x01R\x7FNTYtMTQuMjhjLTEyLjQ1Ni0xMS45NzYta\x03\x80\x86\x01R\x7FMzYuMzg0LTMyLjExMi0zNi40NTYtMzIua\x03\xA0\x86\x01R\x7FMTYNCgkJCQkJCWw3LjU2LTguNTY4YzAua\x03\xC0\x86\x01R\x7FMDI0LDAuMDI0LDUuMTYsNC41MzYsMTEua\x03\xE0\x86\x01R\x7FODMyLDEwLjgyNGM4LjY4OCw4LjIwOCwya\x04\0\x86\x01R\x7FMC44NTYsMTYuMiwyNi43MzYsMjQuNDA4a\x04 \x86\x01R\x7FDQoJCQkJCQljMy4zMTIsNC42MDgsMi42a\x04@\x86\x01R\x7FMTYsMTIuNzQ0LDAuODY0LDE3LjUyYy0xa\x04`\x86\x01R\x7FLjM5MiwzLjg0LTQuMTA0LDcuNDY0LTcua\x04\x80\x86\x01R\x7FMzIsMTAuNTM2Yy0zLjAyNCwyLjkwNC02a\x04\xA0\x86\x01R\x7FLjYsNS40LTkuOTYsNy4xMjgNCgkJCQkJa\x04\xC0\x86\x01R\x7FCWMtMy4zODQsMS43NTItNi43OTIsMi43a\x04\xE0\x86\x01R\x7FNi05LjY5NiwyLjc4NGMtMC4wOTYsMC40a\x05\0\x86\x01R\x7FNTYtMC4yMTYsMC45MzYtMC4zMzYsMS4za\x05 \x86\x01R\x7FOTJjLTAuOTYsMy4yNC0zLjAyNCw2LjA3a\x05@\x86\x01R\x7FMi01LjYxNiw4LjQNCgkJCQkJCWMtMi4za\x05`\x86\x01R\x7FMjgsMi4wODgtNS4xMzYsMy44MTYtNy45a\x05\x80\x86\x01R\x7FNDQsNS4wNjRjLTMuMDcyLDEuMzQ0LTYua\x05\xA0\x86\x01R\x7FMjg4LDIuMTEyLTkuMTY4LDIuMTZjLTAua\x05\xC0\x86\x01R\x7FMDk2LDAuOTM2LTAuMjg4LDEuODQ4LTAua\x05\xE0\x86\x01R\x7FNTUyLDIuNzYNCgkJCQkJCWMtMC45Niwza\x06\0\x86\x01R\x7FLjI0LTMuMDI0LDYuMDcyLTUuNjE2LDgua\x06 \x86\x01R\x7FNGMtMi4zMjgsMi4wODgtNS4xMzYsMy44a\x06@\x86\x01R\x7FMTYtNy45NDQsNS4wNjRjLTQuMTI4LDEua\x06`\x86\x01R\x7FODI0LTguNTQ0LDIuNTY4LTEyLDEuOTY4a\x06\x80\x86\x01R\x7FDQoJCQkJCQljLTAuMTIsMS4yMjQtMC4za\x06\xA0\x86\x01R\x7FNiwyLjQtMC42OTYsMy41MDR2MC4wMjRja\x06\xC0\x86\x01R\x7FLTEuMDMyLDMuMzg0LTMsNi4yNC01LjUya\x06\xE0\x86\x01R\x7FLDguMzUyYy0yLjUyLDIuMTEyLTUuNTkya\x07\0\x86\x01R\x7FLDMuNDgtOC44NTYsMy45MzYNCgkJCQkJa\x07 \x86\x01R\x7FCWMtMy45NiwwLjU1Mi04LjE2LTAuMjQta\x07@\x86\x01R\x7FMTEuOTA0LTIuNjg4Yy0xLjAzMi0wLjY3a\x07`\x86\x01R\x7FMi0yLjE2LTEuNTM2LTMuNDgtMi41OTJsa\x07\x80\x86\x01R\x7FLTAuNzQ0LTAuNTc2bC0xMS4xNi04LjYxa\x07\xA0\x86\x01R\x7FNmw2Ljk2LTkuMDI0bDExLjE2LDguNjE2a\x07\xC0\x86\x01R\x7FDQoJCQkJCQlsMC43NDQsMC41NzZjMS4wa\x07\xE0\x86\x01R\x7FMzIsMC43OTIsMS44OTYsMS40ODgsMi43a\x08\0\x86\x01R\x7FODQsMi4wNGMxLjI5NiwwLjg2NCwyLjcza\x08 \x86\x01R\x7FNiwxLjEyOCw0LjA4LDAuOTZjMS4xMjgta\x08@\x86\x01R\x7FMC4xNjgsMi4xODQtMC42NDgsMy4wNzIta\x08`\x86\x01R\x7FMS4zOTINCgkJCQkJCWMwLjg2NC0wLjcya\x08\x80\x86\x01R\x7FLDEuNTYtMS43MjgsMS45Mi0yLjkwNGwwa\x08\xA0\x86\x01R\x7FLDBjMC40NTYtMS41NiwwLjM4NC0zLjUwa\x08\xC0\x86\x01R\x7FNC0wLjQ1Ni01Ljc2Yy05LjUyOC0xMy4ya\x08\xE0\x86\x01R\x7FOTYtMjkuNDQ4LTI5LjQyNC0yOS40OTYta\t\0\x86\x01R\x7FMjkuNDcyDQoJCQkJCQlsNy4yLTguODU2a\t \x86\x01R\x7FYzAuMDQ4LDAuMDI0LDguMTEyLDYuNTc2a\t@\x86\x01R\x7FLDE2Ljc1MiwxNS4wMjRjMi4zMDQsMi4ya\t`\x86\x01R\x7FNTYsNC44NDgsNC43NTIsNy41MTIsNy4xa\t\x80\x86\x01R\x7FMjhjMC40OCwwLjQzMiwwLjk4NCwwLjg2a\t\xA0\x86\x01R\x7FNCwxLjQ2NCwxLjI5Ng0KCQkJCQkJbDAsa\t\xC0\x86\x01R\x7FMGwwLDBjMC4wOTYsMC4wOTYsMC4yMTYsa\t\xE0\x86\x01R\x7FMC4xOTIsMC4zMTIsMC4yODhjMC42MjQsa\n\0\x86\x01R\x7FMC41NTIsMS4yNDgsMS4xMjgsMS44NzIsa\n \x86\x01R\x7FMS43MDRjMi4xMTIsMS44OTYsNC4yLDMua\n@\x86\x01R\x7FODE2LDYuMzg0LDUuNDk2DQoJCQkJCQlja\n`\x86\x01R\x7FMi41OTIsMS44NDgsMi41NDQsMi4yMzIsa\n\x80\x86\x01R\x7FNS40OTYsMS4zNDRjMC42MjQtMC4xOTIsa\n\xA0\x86\x01R\x7FMS4yOTYtMC41MjgsMi4wMTYtMC44NGMxa\n\xC0\x86\x01R\x7FLjc3Ni0wLjc2OCwzLjUwNC0xLjg0OCw0a\n\xE0\x86\x01R\x7FLjg5Ni0zLjA5Ng0KCQkJCQkJYzEuMTI4a\x0B\0\x86\x01R\x7FLTEuMDMyLDEuOTkyLTIuMTEyLDIuMzA0a\x0B \x86\x01R\x7FLTMuMTY4YzAuMjQtMC44NCwwLjA3Mi0xa\x0B@\x86\x01R\x7FLjg0OC0wLjc0NC0yLjk3NmMtOS41NzYta\x0B`\x86\x01R\x7FMTMuMzItMzUuOTA0LTM2LjQ1Ni0zNS45a\x0B\x80\x86\x01R\x7FNzYtMzYuNTI4bDcuNTYtOC41NjgNCgkJa\x0B\xA0\x86\x01R\x7FCQkJCWMwLjA0OCwwLjA0OCwxNC42ODgsa\x0B\xC0\x86\x01R\x7FMTIuOTEyLDI2LjYxNiwyNS40ODhjMy4ya\x0B\xE0\x86\x01R\x7FNCwzLjE5Miw4LjA2NCw3LjU2LDExLjU0a\x0C\0\x86\x01R\x7FNCwxMC4yNzJjMS4yNzIsMC45MTIsMi4xa\x0C \x86\x01R\x7FNiwyLjA4OCw0LjA4LDEuNDE2DQoJCQkJa\x0C@\x86\x01R\x7FCQljMC44MTYtMC4yODgsMS44NDgtMC42a\x0C`\x86\x01R\x7FOTYsMy0xLjJjMS43NzYtMC43NjgsMy41a\x0C\x80\x86\x01R\x7FMDQtMS44NDgsNC44OTYtMy4wOTZjMS4xa\x0C\xA0\x86\x01R\x7FMjgtMS4wMDgsMS45OTItMi4xMTIsMi4za\x0C\xC0\x86\x01R\x7FMDQtMy4xNjgNCgkJCQkJCWMwLjI0LTAua\x0C\xE0\x86\x01R\x7FODQsMC4wNzItMS44NDgtMC43NDQtM2Mta\r\0\x86\x01R\x7FOS41NzYtMTMuMzItMzUuOTA0LTM2LjQ1a\r \x86\x01R\x7FNi0zNS45NzYtMzYuNTI4bDcuNTYtOC41a\r@\x86\x01R\x7FNjgNCgkJCQkJCUMyOTIuMjIsMjY2LjY4a\r`\x86\x01R\x7FOCwzMDkuMDQ0LDI4MS40OTYsMzIxLjMwa\r\x80\x86\x01R\x7FOCwyOTQuODY0eiIvPg0KCQkJCTwvZz4Na\r\xA0\x86\x01R\x7FCgkJCQk8Zz4NCgkJCQkJPHBhdGggc3R5a\r\xC0\x86\x01R\x7FbGU9ImZpbGwtcnVsZTpldmVub2RkO2Nsa\r\xE0\x86\x01R\x7FaXAtcnVsZTpldmVub2RkO2ZpbGw6IzIxa\x0E\0\x86\x01R\x7FMjEyMTsiIGQ9Ik00MjkuMDIsMjU0LjQya\x0E \x86\x01R\x7FNEwzOTMuNjkyLDEyOS43MmwtMS41MzYta\x0E@\x86\x01R\x7FNS40NDhsLTUuNDQ4LDEuNDg4DQoJCQkJa\x0E`\x86\x01R\x7FCQlsLTQ1LjIxNiwxMi40MDhsLTUuNTY4a\x0E\x80\x86\x01R\x7FLDEuNTM2bDEuNTYsNS41MmwyLjEzNiw3a\x0E\xA0\x86\x01R\x7FLjUzNmMtMjEuNjk2LDEuOTY4LTQyLjg0a\x0E\xC0\x86\x01R\x7FLTIuNjY0LTYyLjU2OC02Ljk2DQoJCQkJa\x0E\xE0\x86\x01R\x7FCQljLTM5LjI2NC04LjU2OC03My4yOTYta\x0F\0\x86\x01R\x7FMTUuOTg0LTk5LjU3NiwyNS44OTZsMCwwa\x0F \x86\x01R\x7FYy03LjEwNCwxMS4zNTItMTQuODU2LDI0a\x0F@\x86\x01R\x7FLjg0LTE2LjY1NiwzNS4xNg0KCQkJCQkJa\x0F`\x86\x01R\x7FYy0yLjQ3MiwxNC4wNCwzLjAyNCwyMy4wa\x0F\x80\x86\x01R\x7FNCwyNS4yNDgsMTguOTZjMTMuNjU2LTIua\x0F\xA0\x86\x01R\x7FNDk2LDIyLjA4LTkuMzYsMjkuOTI4LTE1a\x0F\xC0\x86\x01R\x7FLjc2OGM4Ljg4LTcuMjQ4LDE2Ljg3Mi0xa\x0F\xE0\x86\x01R\x7FMy43NTIsMzIuMzc2LTkuMTQ0DQoJCQkJa\x10\0\x86\x01R\x7FCQljOC4xMzYsMy4zNiw4Ljg4LDMuNjcya\x10 \x86\x01R\x7FLDE1LjI0LDkuMDI0YzIxLjE0NCwxNy43a\x10@\x86\x01R\x7FMzYsNzEuNCw2MS41MzYsNzIsNjIuMDRsa\x10`\x86\x01R\x7FMCwwbDEwLjQxNiw5LjE2OGwyLjkwNCwya\x10\x80\x86\x01R\x7FLjU0NGwzLjQzMi0xLjc1Mg0KCQkJCQkJa\x10\xA0\x86\x01R\x7FbDIwLjg4LTEwLjYwOGwxLjI3Miw0LjQ4a\x10\xC0\x86\x01R\x7FOGw1LjQ3Mi0xLjU2bDQ1LjA5Ni0xMi43a\x10\xE0\x86\x01R\x7FNjhsNS40OTYtMS41Nkw0MjkuMDIsMjU0a\x11\0\x86\x01R\x7FLjQyNEw0MjkuMDIsMjU0LjQyNHogTTM1a\x11 \x86\x01R\x7FMC42MzYsMjY5Ljk3NmwtNy41MTItNi42a\x11@\x86\x01R\x7FDQoJCQkJCQlIMzQzLjFjLTAuMTQ0LTAua\x11`\x86\x01R\x7FMTItNTEuNjI0LTQ1LTcyLjE5Mi02Mi4ya\x11\x80\x86\x01R\x7FMzJjLTcuNzA0LTYuNDU2LTguNTY4LTYua\x11\xA0\x86\x01R\x7FODE2LTE4LjM2LTEwLjg3MmwtMC4yNC0wa\x11\xC0\x86\x01R\x7FLjA5NmwtMC41MjgtMC4xOTINCgkJCQkJa\x11\xE0\x86\x01R\x7FCWMtMjEuMzYtNi40NTYtMzEuNjA4LDEua\x12\0\x86\x01R\x7FOTItNDIuOTg0LDExLjIwOGMtNi43Njgsa\x12 \x86\x01R\x7FNS41Mi0xMy45OTIsMTEuNDI0LTI0Ljc2a\x12@\x86\x01R\x7FOCwxMy4zOTJjLTEwLjA4LDEuODQ4LTEya\x12`\x86\x01R\x7FLjc2OC0xLjAzMi0xMS45MjgtNS43ODQNa\x12\x80\x86\x01R\x7FCgkJCQkJCWMxLjQ4OC04LjQ3Miw4LjU0a\x12\xA0\x86\x01R\x7FNC0yMC42NjQsMTUuMDQ4LTMxLjA1NnYta\x12\xC0\x86\x01R\x7FMC4wMjRjMjEuOTYtMzUuMDY0LDUyLjM5a\x12\xE0\x86\x01R\x7FMi0yOC40NCw4Ny40OC0yMC43ODQNCgkJa\x13\0\x86\x01R\x7FCQkJCWMyMS4xOTIsNC42MDgsNDMuOTQ0a\x13 \x86\x01R\x7FLDkuNTc2LDY4LjE2LDYuOTM2bDI3LjI2a\x13@\x86\x01R\x7FNCw5Ni4yNEwzNTAuNjM2LDI2OS45NzZMa\x13`\x86\x01R\x7FMzUwLjYzNiwyNjkuOTc2eiBNMzgyLjM2a\x13\x80\x86\x01R\x7FNCwyNjEuNjk2TDM1MC4wNiwxNDcuNjI1a\x13\xA0\x86\x01R\x7FDQoJCQkJCQlsMzQuMi05LjM4NGwzMi4ya\x13\xC0\x86\x01R\x7FMzIsMTEzLjc4NEwzODIuMzY0LDI2MS42a\x13\xE0\x86\x01R\x7FOTZ6Ii8+DQoJCQkJPC9nPg0KCQkJCTxna\x14\0\x86\x01R\x7FPg0KCQkJCQk8cGF0aCBzdHlsZT0iZmlsa\x14 \x86\x01R\x7FbC1ydWxlOmV2ZW5vZGQ7Y2xpcC1ydWxla\x14@\x86\x01R\x7FOmV2ZW5vZGQ7ZmlsbDojMjEyMTIxOyIga\x14`\x86\x01R\x7FZD0iTTE1NS4wMTMsMTQ1LjJsLTIuMjgsa\x14\x80\x86\x01R\x7FOC4wMTYNCgkJCQkJCWMxMC4yMjQsMC4ya\x14\xA0\x86\x01R\x7FMTYsMjkuNTkyLDAuMDQ4LDQ1LjcyLTMua\x14\xC0\x86\x01R\x7FNmwyLjQ5NiwxMS4xMzZjLTE4Ljk2LDQua\x14\xE0\x86\x01R\x7FMjk2LTQxLjgwOCw0LjEwNC01MS40MDgsa\x15\0\x86\x01R\x7FMy43OTJsLTI1LjQ4OCw4OS45NzYNCgkJa\x15 \x86\x01R\x7FCQkJCWM5LjY3MiwzLjA0OCwyNy44ODgsa\x15@\x86\x01R\x7FMTAuOTY4LDI5LjM1MiwyNy43MmwtMTEua\x15`\x86\x01R\x7FNCwwLjk4NGMtMC44ODgtMTAuMTUyLTEza\x15\x80\x86\x01R\x7FLjcyOC0xNS41MDQtMjEuMDcyLTE3Ljc2a\x15\xA0\x86\x01R\x7FbC0xLjM2OCw0LjgyNGwtMS41Niw1LjQ5a\x15\xC0\x86\x01R\x7FNg0KCQkJCQkJbC01LjQ3Mi0xLjU2bC00a\x15\xE0\x86\x01R\x7FNS4wOTYtMTIuNzY4bC01LjQ5Ni0xLjU2a\x16\0\x86\x01R\x7FbDEuNTYtNS40NzJsMzUuMzI4LTEyNC43a\x16 \x86\x01R\x7FMDRsMS41MzYtNS40NDhsNS40NDgsMS40a\x16@\x86\x01R\x7FODhsNDUuMjE2LDEyLjQwOGw1LjU2OCwxa\x16`\x86\x01R\x7FLjUzNg0KCQkJCQkJTDE1NS4wMTMsMTQ1a\x16\x80\x86\x01R\x7FLjJMMTU1LjAxMywxNDUuMkwxNTUuMDEza\x16\xA0\x86\x01R\x7FLDE0NS4yeiBNMTEwLjE1NywyNjEuNjk2a\x16\xC0\x86\x01R\x7FbDMyLjMwNC0xMTQuMDcybC0zNC4yLTkua\x16\xE0\x86\x01R\x7FMzg0TDc2LjAyOSwyNTIuMDI0TDExMC4xa\x17\0\x86\x01R\x7FNTcsMjYxLjY5NnoiLz4NCgkJCQk8L2c+a\x17 \x86\x01R\x7FDQoJCQkJPGc+DQoJCQkJCTxwYXRoIHN0a\x17@\x86\x01R\x7FeWxlPSJmaWxsLXJ1bGU6ZXZlbm9kZDtja\x17`\x86\x01R\x7FbGlwLXJ1bGU6ZXZlbm9kZDtmaWxsOiMya\x17\x80\x86\x01R\x7FMTIxMjE7IiBkPSJNMjQwLjc2NCwzMzYua\x17\xA0\x86\x01R\x7FNjcyTDI0MC43NjQsMzM2LjY3Mg0KCQkJa\x17\xC0\x86\x01R\x7FCQkJYy0xLjEwNC0wLjgxNi0yLjQ0OC0xa\x17\xE0\x86\x01R\x7FLjA4LTMuNzQ0LTAuODg4cy0yLjQ5Niwwa\x18\0\x86\x01R\x7FLjg2NC0zLjMxMiwxLjk0NGwtOC44MzIsa\x18 \x86\x01R\x7FMTEuOTc2aDAuMDI0Yy0wLjgxNiwxLjEwa\x18@\x86\x01R\x7FNC0xLjEwNCwyLjQ3Mi0wLjkxMiwzLjc0a\x18`\x86\x01R\x7FNA0KCQkJCQkJYzAuMTkyLDEuMjcyLDAua\x18\x80\x86\x01R\x7FODY0LDIuNDcyLDEuOTQ0LDMuMjg4bDAua\x18\xA0\x86\x01R\x7FMTY4LDAuMTQ0YzEuMDU2LDAuNzIsMi4za\x18\xC0\x86\x01R\x7FNTIsMC45NiwzLjU3NiwwLjc2OGMxLjI5a\x18\xE0\x86\x01R\x7FNi0wLjE5MiwyLjQ5Ni0wLjg2NCwzLjMxa\x19\0\x86\x01R\x7FMi0xLjk0NA0KCQkJCQkJbDguODU2LTEya\x19 \x86\x01R\x7FYzAuODE2LTEuMTA0LDEuMDgtMi40NDgsa\x19@\x86\x01R\x7FMC44ODgtMy43NDRDMjQyLjUxNiwzMzgua\x19`\x86\x01R\x7FNjg4LDI0MS44NDQsMzM3LjQ4OCwyNDAua\x19\x80\x86\x01R\x7FNzY0LDMzNi42NzJMMjQwLjc2NCwzMzYua\x19\xA0\x86\x01R\x7FNjcyDQoJCQkJCQlMMjQwLjc2NCwzMzYua\x19\xC0\x86\x01R\x7FNjcyeiBNMTc2LjQyMSwyNjYuMjhjNC4ya\x19\xE0\x86\x01R\x7FMjQsMy4xMiw2LjgxNiw3LjY4LDcuNTM2a\x1A\0\x86\x01R\x7FLDEyLjUwNGMwLjMxMiwyLjA2NCwwLjI4a\x1A \x86\x01R\x7FOCw0LjE3Ni0wLjA5Niw2LjI0DQoJCQkJa\x1A@\x86\x01R\x7FCQljMS44OTYtMC45NiwzLjkzNi0xLjYwa\x1A`\x86\x01R\x7FOCw2LjAyNC0xLjkyYzUuMDE2LTAuNzQ0a\x1A\x80\x86\x01R\x7FLDEwLjI5NiwwLjM4NCwxNC42ODgsMy42a\x1A\xA0\x86\x01R\x7FMjR2MC4wMjRjNC40MTYsMy4yNCw3LjA4a\x1A\xC0\x86\x01R\x7FLDcuOTY4LDcuODI0LDEyLjk4NA0KCQkJa\x1A\xE0\x86\x01R\x7FCQkJYzAuMzEyLDEuOTkyLDAuMjg4LDQua\x1B\0\x86\x01R\x7FMDMyLTAuMDI0LDYuMDQ4YzAuNi0wLjE0a\x1B \x86\x01R\x7FNCwxLjE3Ni0wLjI2NCwxLjc3Ni0wLjM2a\x1B@\x86\x01R\x7FYzQuNTM2LTAuNjcyLDkuMzM2LDAuMzYsa\x1B`\x86\x01R\x7FMTMuMjk2LDMuMjg4bDAuMjg4LDAuMjQNa\x1B\x80\x86\x01R\x7FCgkJCQkJCWMzLjgxNiwyLjkyOCw2LjE0a\x1B\xA0\x86\x01R\x7FNCw3LjEyOCw2LjgxNiwxMS41MmMwLjIxa\x1B\xC0\x86\x01R\x7FNiwxLjM2OCwwLjI2NCwyLjc2LDAuMTQ0a\x1B\xE0\x86\x01R\x7FLDQuMTUyYzAuMjE2LTAuMDQ4LDAuNDA4a\x1C\0\x86\x01R\x7FLTAuMDcyLDAuNjI0LTAuMDk2DQoJCQkJa\x1C \x86\x01R\x7FCQljNC4xMjgtMC42MjQsOC41NDQsMC4za\x1C@\x86\x01R\x7FMzYsMTIuMTkyLDMuMDI0bDAsMGMzLjY3a\x1C`\x86\x01R\x7FMiwyLjcxMiw1Ljg4LDYuNjI0LDYuNTA0a\x1C\x80\x86\x01R\x7FLDEwLjc3NmMwLjYyNCw0LjEyOC0wLjMza\x1C\xA0\x86\x01R\x7FNiw4LjU0NC0zLjA0OCwxMi4xOTINCgkJa\x1C\xC0\x86\x01R\x7FCQkJCWwtOC44NTYsMTJjLTIuNzEyLDMua\x1C\xE0\x86\x01R\x7FNjcyLTYuNjI0LDUuODgtMTAuNzc2LDYua\x1D\0\x86\x01R\x7FNTA0Yy00LjEyOCwwLjYyNC04LjUyLTAua\x1D \x86\x01R\x7FMzM2LTEyLjE5Mi0zLjAyNHYwLjAyNA0Ka\x1D@\x86\x01R\x7FCQkJCQkJYy0zLjY0OC0yLjY4OC01Ljg4a\x1D`\x86\x01R\x7FLTYuNjI0LTYuNTA0LTEwLjhjLTAuMDcya\x1D\x80\x86\x01R\x7FLTAuNDgtMC4xMi0wLjk2LTAuMTQ0LTEua\x1D\xA0\x86\x01R\x7FNDRjLTEuMDA4LDAuMzM2LTIuMDQsMC42a\x1D\xC0\x86\x01R\x7FLTMuMDcyLDAuNzQ0DQoJCQkJCQljLTQua\x1D\xE0\x86\x01R\x7FNTEyLDAuNjcyLTkuMzEyLTAuMzYtMTMua\x1E\0\x86\x01R\x7FMjk2LTMuMzEybDAsMGMtMy45ODQtMi45a\x1E \x86\x01R\x7FNTItNi40MDgtNy4yMjQtNy4wOC0xMS43a\x1E@\x86\x01R\x7FMzZjLTAuMTQ0LTAuOTEyLTAuMjE2LTEua\x1E`\x86\x01R\x7FODI0LTAuMTkyLTIuNzYNCgkJCQkJCWMta\x1E\x80\x86\x01R\x7FMS41MTIsMC42MjQtMy4wNzIsMS4wOC00a\x1E\xA0\x86\x01R\x7FLjY4LDEuMzJjLTUuMDE2LDAuNzQ0LTEwa\x1E\xC0\x86\x01R\x7FLjI5Ni0wLjM4NC0xNC42ODgtMy42MjRsa\x1E\xE0\x86\x01R\x7FMCwwYy00LjM5Mi0zLjI0LTcuMDgtNy45a\x1F\0\x86\x01R\x7FOTItNy44MjQtMTMuMDA4DQoJCQkJCQlja\x1F \x86\x01R\x7FLTAuMzg0LTIuNDcyLTAuMjg4LTUuMDE2a\x1F@\x86\x01R\x7FLDAuMzEyLTcuNDg4Yy0xLjU4NCwwLjcya\x1F`\x86\x01R\x7FLTMuMjY0LDEuMi00Ljk2OCwxLjQ2NGMta\x1F\x80\x86\x01R\x7FNC44MjQsMC43Mi05LjkxMi0wLjM4NC0xa\x1F\xA0\x86\x01R\x7FNC4xMzYtMy40OA0KCQkJCQkJYy00LjIya\x1F\xC0\x86\x01R\x7FNC0zLjEyLTYuODE2LTcuNjgtNy41MzYta\x1F\xE0\x86\x01R\x7FMTIuNTA0czAuMzg0LTkuOTEyLDMuNDgta \0\x86\x01R\x7FMTQuMTM2aDAuMDI0bDEwLjk5Mi0xNC45a  \x86\x01R\x7FMDRjMy4xMi00LjI0OCw3LjY4LTYuODE2a @\x86\x01R\x7FLDEyLjQ4LTcuNTM2DQoJCQkJCQlDMTY3a `\x86\x01R\x7FLjA4NSwyNjIuMDU2LDE3Mi4xNzMsMjYza \x80\x86\x01R\x7FLjE2LDE3Ni40MjEsMjY2LjI4TDE3Ni40a \xA0\x86\x01R\x7FMjEsMjY2LjI4TDE3Ni40MjEsMjY2LjI4a \xC0\x86\x01R\x7FTDE3Ni40MjEsMjY2LjI4eiBNMTcyLjY1a \xE0\x86\x01R\x7FMywyODAuNDY0DQoJCQkJCQljLTAuMjg4a!\0\x86\x01R\x7FLTEuOTQ0LTEuMzItMy43NjgtMi45NzYta! \x86\x01R\x7FNC45OTJ2LTAuMDI0Yy0xLjY4LTEuMjI0a!@\x86\x01R\x7FLTMuNzItMS42NTYtNS42ODgtMS4zNjhja!`\x86\x01R\x7FLTEuOTY4LDAuMjg4LTMuNzkyLDEuMzIta!\x80\x86\x01R\x7FNS4wMTYsMi45NzYNCgkJCQkJCWwtMTAua!\xA0\x86\x01R\x7FOTkyLDE0Ljg4aDAuMDI0Yy0xLjI0OCwxa!\xC0\x86\x01R\x7FLjY4LTEuNjgsMy43NDQtMS4zOTIsNS42a!\xE0\x86\x01R\x7FODhjMC4yODgsMS45NDQsMS4zMiwzLjc2a\"\0\x86\x01R\x7FOCwyLjk3Niw0Ljk5Mg0KCQkJCQkJYzEua\" \x86\x01R\x7FNjgsMS4yNDgsMy43NDQsMS42OCw1LjY4a\"@\x86\x01R\x7FOCwxLjM5MnMzLjc2OC0xLjMyLDQuOTkya\"`\x86\x01R\x7FLTIuOTc2bDAuMDI0LDBsMTAuOTkyLTE0a\"\x80\x86\x01R\x7FLjg4aC0wLjAyNA0KCQkJCQkJQzE3Mi40a\"\xA0\x86\x01R\x7FODUsMjg0LjQ3MiwxNzIuOTQxLDI4Mi40a\"\xC0\x86\x01R\x7FMDgsMTcyLjY1MywyODAuNDY0TDE3Mi42a\"\xE0\x86\x01R\x7FNTMsMjgwLjQ2NEwxNzIuNjUzLDI4MC40a#\0\x86\x01R\x7FNjR6IE0yMDEuMDkyLDMwMS40MTYNCgkJa# \x86\x01R\x7FCQkJCWMtMC4zMTItMi4xMzYtMS40NC00a#@\x86\x01R\x7FLjE1Mi0zLjI2NC01LjQ5NnYwLjAyNGMta#`\x86\x01R\x7FMS44NDgtMS4zNjgtNC4xMDQtMS44NDgta#\x80\x86\x01R\x7FNi4yNC0xLjUzNmMtMi4xNiwwLjMzNi00a#\xA0\x86\x01R\x7FLjE1MiwxLjQ0LTUuNTIsMy4yNjQNCgkJa#\xC0\x86\x01R\x7FCQkJCWwtMTEuNjE2LDE1Ljc0NGMtMS4za#\xE0\x86\x01R\x7FNDQsMS44NDgtMS44MjQsNC4xMDQtMS41a$\0\x86\x01R\x7FMTIsNi4yNGMwLjMxMiwyLjEzNiwxLjQ0a$ \x86\x01R\x7FLDQuMTI4LDMuMjY0LDUuNDk2bDAsMA0Ka$@\x86\x01R\x7FCQkJCQkJYzEuODQ4LDEuMzY4LDQuMTA0a$`\x86\x01R\x7FLDEuODQ4LDYuMjQsMS41MzZjMi4xNi0wa$\x80\x86\x01R\x7FLjMxMiw0LjE1Mi0xLjQ0LDUuNTItMy4ya$\xA0\x86\x01R\x7FNjRsMCwwbDExLjYxNi0xNS43NDQNCgkJa$\xC0\x86\x01R\x7FCQkJCUMyMDAuOTQ4LDMwNS44MzIsMjAxa$\xE0\x86\x01R\x7FLjQyOCwzMDMuNTc2LDIwMS4wOTIsMzAxa%\0\x86\x01R\x7FLjQxNkwyMDEuMDkyLDMwMS40MTZMMjAxa% \x86\x01R\x7FLjA5MiwzMDEuNDE2eiBNMjIzLjI0NCwza%@\x86\x01R\x7FMjIuMTUyDQoJCQkJCQljLTAuMjQtMS42a%`\x86\x01R\x7FOC0xLjEwNC0zLjI0LTIuNTItNC4yNzJ2a%\x80\x86\x01R\x7FMC4wMjRjLTEuNDQtMS4wNTYtMy4xOTIta%\xA0\x86\x01R\x7FMS40NC00Ljg0OC0xLjE3NmMtMS42NTYsa%\xC0\x86\x01R\x7FMC4yNC0zLjIxNiwxLjEwNC00LjI0OCwya%\xE0\x86\x01R\x7FLjU0NGwtMC4xOTIsMC4yNA0KCQkJCQkJa&\0\x86\x01R\x7FbC05Ljg4OCwxMy40MTZ2MC4wMjRjLTEua& \x86\x01R\x7FMDU2LDEuNDE2LTEuNDE2LDMuMTY4LTEua&@\x86\x01R\x7FMTUyLDQuODI0YzAuMjY0LDEuNjgsMS4xa&`\x86\x01R\x7FMjgsMy4yNCwyLjU0NCw0LjI3MmwwLDANa&\x80\x86\x01R\x7FCgkJCQkJCWMxLjQxNiwxLjA1NiwzLjE2a&\xA0\x86\x01R\x7FOCwxLjQxNiw0Ljg0OCwxLjE1MmMxLjY4a&\xC0\x86\x01R\x7FLTAuMjY0LDMuMjQtMS4xMjgsNC4yNzIta&\xE0\x86\x01R\x7FMi41NDRMMjIyLjE0MSwzMjcNCgkJCQkJa'\0\x86\x01R\x7FCUMyMjMuMTI0LDMyNS41ODQsMjIzLjUwa' \x86\x01R\x7FOCwzMjMuODMyLDIyMy4yNDQsMzIyLjE1a'@\x86\x01R\x7FMnoiLz4NCgkJCQk8L2c+DQoJCQk8L2c+a'`\x86\x01R\x7FDQoJCTwvZz4NCgk8L2c+DQo8L2c+DQo8a'\x80\x86\x01Rm\x13\x0C\xD3\x8C\x96\x9E\x8D\x13\x90\xD9\xCFOH\x8B`\x92\x1Ba'\xA0\x86\x01RQ\x97Q\x97\x98\x89\x98\x92\x95\x92\x91\x82\x91\x90\x8A\x01^\x87\x01\x90` \x82\x01\x90_\x82RQ\x92\x83\x91^\x01` \x01\x90_\x82RQ\x80\x92\x82^\x01\x90_\x82RQ\x80\x92\x82^\x01_\x81R\x03`\x1F\x19\x81\x01\x82Ra6F\x90\x82a7\x93V[`@Qa6T\x81\x92\x82a7iV[\x03\x90\xF3[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[a6xa\x01\x1C\x91a8\xA1V[\x92a\x01\rV[_\x80\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[4a6~W` 6`\x03\x19\x01\x12a6~Wa6T` a6\xF8`%a6\xC5`\x045`\x01`\x01`\xA0\x1B\x03\x16a84V[`@Qd\xF0\x9F\xA4\x9D-`\xD8\x1B\x85\x82\x01R\x81Q\x90\x94\x85\x92\x82\x91\x01\x84\x84\x01^\x81\x01_\x83\x82\x01R\x03\x01`\x1F\x19\x81\x01\x83R\x82a7\x93V[`@Q\x91\x82\x91\x82a7iV[4a6~W` 6`\x03\x19\x01\x12a6~Wa6T` a6\xF8`(a73`\x045`\x01`\x01`\xA0\x1B\x03\x16a7\xB5V[`@Q\x93\x84\x91g\x02\x1B{k\x83\x0B\x1B\xA1`\xC5\x1B\x82\x84\x01R\x80Q\x91\x82\x91\x01\x84\x84\x01^\x81\x01_\x83\x82\x01R\x03\x01`\x1F\x19\x81\x01\x83R\x82a7\x93V[` `@\x92\x81\x83R\x80Q\x91\x82\x91\x82\x82\x86\x01R\x01\x84\x84\x01^_\x82\x82\x01\x84\x01R`\x1F\x01`\x1F\x19\x16\x01\x01\x90V[\x90`\x1F\x80\x19\x91\x01\x16\x81\x01\x90\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17a6\x82W`@RV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x15a8\x10Wa7\xD9\x90c\x06\xFD\xDE\x03`\x04R`\x04_Ra=BV[\x90\x81Q\x15a7\xE3WV[\x90P`@Qa7\xF3`@\x82a7\x93V[`\r\x81Rl:\xB75\xB77\xBB\xB7\x10:7\xB5\xB2\xB7`\x99\x1B` \x82\x01R\x90V[P`@Qa8\x1F`@\x82a7\x93V[`\x05\x81Rd\"\xBA42\xB9`\xD9\x1B` \x82\x01R\x90V[\x80``\x1B\x15a8\x7FWa8R\x90c\x95\xD8\x9BA`\x04R`\x04_Ra=BV[\x90\x81Q\x15a8\\WV[\x90P`@Qa8l`@\x82a7\x93V[`\x03\x81Rb???`\xE8\x1B` \x82\x01R\x90V[P`@Qa8\x8E`@\x82a7\x93V[`\x03\x81Rb\x08\xAA\x89`\xEB\x1B` \x82\x01R\x90V[\x90`@Q\x91`\x80\x83\x01`@Ro0123456789abcdef`\x0FR`\x02\x83\x01\x90`(\x82R_`J\x85\x01R``\x1B`\x01_[\x80\x80\x01\x86\x01`\"\x84\x83\x1A`\x0F\x81\x16Q`#\x84\x01S`\x04\x1CQ\x91\x01S\x01\x90`\x14\x82\x14a9\x05W\x90`\x01\x90a8\xD7V[PPa0x`\x02\x82Q\x01\x91R\x82R\x81`\"\x81\x01\x90\x7F\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x88\x80`(\x83 \x16`\x01_[`\x11`\xF3\x1B\x83\x82\x1A\x02\x81\x80\x01R\x01\x90`\x14\x82\x14a9cW\x90`\x01\x90a9CV[PP`B\x91\x80Q\x7F                                \x81_Q\x16`\x01\x1C\x16\x18\x90R\x01\x80Q\x7F                                \x81` Q\x16`\x01\x1C\x16\x18\x90RV[`\x08\x81\x10\x15a6XW\x80a9\xFFWP`@Qa9\xE5`@\x82a7\x93V[`\n\x81Ri\x13\xDB\x99H\x1C\xD9X\xDB\xDB\x99`\xB2\x1B` \x82\x01R\x90V[`\x01\x81\x03a:5WP`@Qa:\x16`@\x82a7\x93V[`\x0F\x81RnFifteen seconds`\x88\x1B` \x82\x01R\x90V[`\x02\x81\x03a:fWP`@Qa:L`@\x82a7\x93V[`\n\x81RiOne minute`\xB0\x1B` \x82\x01R\x90V[`\x03\x81\x03a:\x98WP`@Qa:}`@\x82a7\x93V[`\x0B\x81RjTen minutes`\xA8\x1B` \x82\x01R\x90V[`\x04\x81\x03a:\xDCWP`@Qa:\xAF`@\x82a7\x93V[`\x19\x81R\x7FOne hour and five minutes\0\0\0\0\0\0\0` \x82\x01R\x90V[`\x05\x81\x03a;\nWP`@Qa:\xF3`@\x82a7\x93V[`\x07\x81RfOne day`\xC8\x1B` \x82\x01R\x90V[`\x06\x81\x03a;NWP`@Qa;!`@\x82a7\x93V[`\x17\x81R\x7FSeven days and one hour\0\0\0\0\0\0\0\0\0` \x82\x01R\x90V[`\x07\x03a;~W`@Qa;c`@\x82a7\x93V[`\x0B\x81RjThirty days`\xA8\x1B` \x82\x01R\x90V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01Rs\x15[\x9A\xDB\x9B\xDD\xDB\x88\x1C\x99\\\xD9]\x08\x1C\x19\\\x9A[\xD9`b\x1B`D\x82\x01R`d\x90\xFD[`\x02\x81\x10\x15a6XW\x80a;\xF1WP`@Qa;\xD7`@\x82a7\x93V[`\n\x81Ri&\xBA\xB6:4\xB1\xB40\xB4\xB7`\xB1\x1B` \x82\x01R\x90V[`\x01\x03a<$W`@Qa<\x06`@\x82a7\x93V[`\x0E\x81RmChain-specific`\x90\x1B` \x82\x01R\x90V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01RlUnknown scope`\x98\x1B`D\x82\x01R`d\x90\xFD[\x90`@Q`\n`\x80\x82\x01\x93`\xA0\x83\x01`@R_\x85R\x93[_\x19\x01\x93`0\x82\x82\x06\x01\x85S\x04\x92\x83\x15a<\x8CW`\n\x90a<pV[\x80\x93P`\x80\x91\x03\x01\x91`\x1F\x19\x01\x91\x82RV[`\x02a=?\x91`\r` \x94`@Qa<\xB7`@\x82a7\x93V[`\x01\x81R`0\x87\x80\x83\x01\x93`\x0B`\xFA\x1B\x85R`@Q\x99\x8A\x97o=\x91:90\xB4\xBA/\xBA<\xB82\x91\x1D\x10\x11`\x81\x1B\x82\x8A\x01R\x80Q\x91\x82\x91\x01\x85\x8A\x01^\x87\x01\x90l\x11\x16\x10\x11;0\xB6:\xB2\x91\x1D\x10\x11`\x99\x1B\x84\x83\x01R\x80Q\x92\x83\x91\x01`=\x83\x01^\x01\x01\x90a\"}`\xF0\x1B\x84\x83\x01RQ\x80\x92`\x0F\x83\x01^\x01\x01_\x83\x82\x01R\x03\x01`\x1F\x19\x81\x01\x83R\x82a7\x93V[\x90V[` _``\x92\x82\x82Q\x91b\x01\x86\xA0\xFA\x15a=?WP`@Q\x80` \x01`@=\x10\x15a=\xA7W[_` =\x80a\x03\xE8\x10a\x03\xE8\x82\x18\x02\x18\x80\x83\x85>\x84\x01\x01S[\x80Q_\x1A\x15a=\x92W`\x01\x01a=\x81V[\x81\x81\x03`\x1F\x19\x01\x82R_\x81R` \x01`@R\x90V[_Q=`\x1F\x19\x01\x81\x11\x15a=\xBCW[Pa=hV[` \x81\x84>\x82Q=\x82\x90\x03`\x1F\x19\x01\x81\x11\x15a=\xD8WPa=\xB6V[\x90`@\x92\x82` \x93a\x03\xE8\x10a\x03\xE8\x82\x18\x02\x18\x92\x83\x92\x83\x87R\x01\x90>\x82\x01_` \x82\x01R\x01`@R\x90V\xFE\xA1dsolcC\0\x08\x1C\0\n",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361015610011575f80fd5b5f3560e01c637423eb3c14610024575f80fd5b3461013f575f36600319011261013f57323303610130577f00000000000000000000000000000000000000000000000000000000000000008015610125575b610116575f8080807f0000000000000000000000000000000000000000000000000000000000000000600a5a04fa3d15610111573d67ffffffffffffffff81116100fd5760405190601f8101601f19908116603f0116820167ffffffffffffffff8111838210176100fd5760405281525f60203d92013e5b156100ee575f805460ff19166001179055005b6370a4078f60e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b6100db565b630f45b98b60e41b5f5260045ffd5b5060ff5f5416610063565b63096650c560e21b5f5260045ffd5b5f80fdfea164736f6c634300081c000a
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10\x15a\0\x11W_\x80\xFD[_5`\xE0\x1Cct#\xEB<\x14a\0$W_\x80\xFD[4a\x01?W_6`\x03\x19\x01\x12a\x01?W23\x03a\x010W\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x15a\x01%W[a\x01\x16W_\x80\x80\x80\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\nZ\x04\xFA=\x15a\x01\x11W=g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11a\0\xFDW`@Q\x90`\x1F\x81\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x82\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x83\x82\x10\x17a\0\xFDW`@R\x81R_` =\x92\x01>[\x15a\0\xEEW_\x80T`\xFF\x19\x16`\x01\x17\x90U\0[cp\xA4\x07\x8F`\xE0\x1B_R`\x04_\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[a\0\xDBV[c\x0FE\xB9\x8B`\xE4\x1B_R`\x04_\xFD[P`\xFF_T\x16a\0cV[c\tfP\xC5`\xE2\x1B_R`\x04_\xFD[_\x80\xFD\xFE\xA1dsolcC\0\x08\x1C\0\n",
    );
    /**Custom error with signature `OnlyDirectCalls()` and selector `0x25994314`.
```solidity
error OnlyDirectCalls();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OnlyDirectCalls {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OnlyDirectCalls> for UnderlyingRustTuple<'_> {
            fn from(value: OnlyDirectCalls) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OnlyDirectCalls {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OnlyDirectCalls {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OnlyDirectCalls()";
            const SELECTOR: [u8; 4] = [37u8, 153u8, 67u8, 20u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `TStoreAlreadyActivated()` and selector `0xf45b98b0`.
```solidity
error TStoreAlreadyActivated();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TStoreAlreadyActivated {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TStoreAlreadyActivated> for UnderlyingRustTuple<'_> {
            fn from(value: TStoreAlreadyActivated) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TStoreAlreadyActivated {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TStoreAlreadyActivated {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TStoreAlreadyActivated()";
            const SELECTOR: [u8; 4] = [244u8, 91u8, 152u8, 176u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `TStoreNotSupported()` and selector `0x70a4078f`.
```solidity
error TStoreNotSupported();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TStoreNotSupported {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TStoreNotSupported> for UnderlyingRustTuple<'_> {
            fn from(value: TStoreNotSupported) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TStoreNotSupported {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TStoreNotSupported {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TStoreNotSupported()";
            const SELECTOR: [u8; 4] = [112u8, 164u8, 7u8, 143u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `TloadTestContractDeploymentFailed()` and selector `0x2aea5887`.
```solidity
error TloadTestContractDeploymentFailed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TloadTestContractDeploymentFailed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TloadTestContractDeploymentFailed>
        for UnderlyingRustTuple<'_> {
            fn from(value: TloadTestContractDeploymentFailed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for TloadTestContractDeploymentFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TloadTestContractDeploymentFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TloadTestContractDeploymentFailed()";
            const SELECTOR: [u8; 4] = [42u8, 234u8, 88u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `__activateTstore()` and selector `0x7423eb3c`.
```solidity
function __activateTstore() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct __activateTstoreCall {}
    ///Container type for the return parameters of the [`__activateTstore()`](__activateTstoreCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct __activateTstoreReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<__activateTstoreCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: __activateTstoreCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for __activateTstoreCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<__activateTstoreReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: __activateTstoreReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for __activateTstoreReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for __activateTstoreCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = __activateTstoreReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "__activateTstore()";
            const SELECTOR: [u8; 4] = [116u8, 35u8, 235u8, 60u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`TransferLogic`](self) function calls.
    pub enum TransferLogicCalls {
        __activateTstore(__activateTstoreCall),
    }
    #[automatically_derived]
    impl TransferLogicCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[116u8, 35u8, 235u8, 60u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TransferLogicCalls {
        const NAME: &'static str = "TransferLogicCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::__activateTstore(_) => {
                    <__activateTstoreCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<TransferLogicCalls>] = &[
                {
                    fn __activateTstore(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TransferLogicCalls> {
                        <__activateTstoreCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TransferLogicCalls::__activateTstore)
                    }
                    __activateTstore
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::__activateTstore(inner) => {
                    <__activateTstoreCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::__activateTstore(inner) => {
                    <__activateTstoreCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`TransferLogic`](self) custom errors.
    pub enum TransferLogicErrors {
        OnlyDirectCalls(OnlyDirectCalls),
        TStoreAlreadyActivated(TStoreAlreadyActivated),
        TStoreNotSupported(TStoreNotSupported),
        TloadTestContractDeploymentFailed(TloadTestContractDeploymentFailed),
    }
    #[automatically_derived]
    impl TransferLogicErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [37u8, 153u8, 67u8, 20u8],
            [42u8, 234u8, 88u8, 135u8],
            [112u8, 164u8, 7u8, 143u8],
            [244u8, 91u8, 152u8, 176u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TransferLogicErrors {
        const NAME: &'static str = "TransferLogicErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::OnlyDirectCalls(_) => {
                    <OnlyDirectCalls as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TStoreAlreadyActivated(_) => {
                    <TStoreAlreadyActivated as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TStoreNotSupported(_) => {
                    <TStoreNotSupported as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TloadTestContractDeploymentFailed(_) => {
                    <TloadTestContractDeploymentFailed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<TransferLogicErrors>] = &[
                {
                    fn OnlyDirectCalls(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TransferLogicErrors> {
                        <OnlyDirectCalls as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TransferLogicErrors::OnlyDirectCalls)
                    }
                    OnlyDirectCalls
                },
                {
                    fn TloadTestContractDeploymentFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TransferLogicErrors> {
                        <TloadTestContractDeploymentFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TransferLogicErrors::TloadTestContractDeploymentFailed)
                    }
                    TloadTestContractDeploymentFailed
                },
                {
                    fn TStoreNotSupported(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TransferLogicErrors> {
                        <TStoreNotSupported as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TransferLogicErrors::TStoreNotSupported)
                    }
                    TStoreNotSupported
                },
                {
                    fn TStoreAlreadyActivated(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TransferLogicErrors> {
                        <TStoreAlreadyActivated as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(TransferLogicErrors::TStoreAlreadyActivated)
                    }
                    TStoreAlreadyActivated
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::OnlyDirectCalls(inner) => {
                    <OnlyDirectCalls as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TStoreAlreadyActivated(inner) => {
                    <TStoreAlreadyActivated as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TStoreNotSupported(inner) => {
                    <TStoreNotSupported as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::TloadTestContractDeploymentFailed(inner) => {
                    <TloadTestContractDeploymentFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::OnlyDirectCalls(inner) => {
                    <OnlyDirectCalls as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TStoreAlreadyActivated(inner) => {
                    <TStoreAlreadyActivated as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TStoreNotSupported(inner) => {
                    <TStoreNotSupported as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TloadTestContractDeploymentFailed(inner) => {
                    <TloadTestContractDeploymentFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`TransferLogic`](self) contract instance.

See the [wrapper's documentation](`TransferLogicInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> TransferLogicInstance<T, P, N> {
        TransferLogicInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<TransferLogicInstance<T, P, N>>,
    > {
        TransferLogicInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        TransferLogicInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`TransferLogic`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`TransferLogic`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct TransferLogicInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for TransferLogicInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("TransferLogicInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TransferLogicInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`TransferLogic`](self) contract instance.

See the [wrapper's documentation](`TransferLogicInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<TransferLogicInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> TransferLogicInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> TransferLogicInstance<T, P, N> {
            TransferLogicInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TransferLogicInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`__activateTstore`] function.
        pub fn __activateTstore(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, __activateTstoreCall, N> {
            self.call_builder(&__activateTstoreCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > TransferLogicInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
